// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package captcha

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *EmailCaptchaRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_EmailCaptchaRequest[number], err)
}

func (x *EmailCaptchaRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Email = append(x.Email, v)
	return offset, err
}

func (x *EmailCaptchaResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_EmailCaptchaResponse[number], err)
}

func (x *EmailCaptchaResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v bool
			v, offset, err = fastpb.ReadBool(buf, _type)
			if err != nil {
				return offset, err
			}
			x.Success = append(x.Success, v)
			return offset, err
		})
	return offset, err
}

func (x *EmailValidateList) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_EmailValidateList[number], err)
}

func (x *EmailValidateList) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Email, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *EmailValidateList) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Captcha, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *EmailValidateRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_EmailValidateRequest[number], err)
}

func (x *EmailValidateRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v EmailValidateList
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Lists = append(x.Lists, &v)
	return offset, nil
}

func (x *EmailValidateResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_EmailValidateResponse[number], err)
}

func (x *EmailValidateResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v bool
			v, offset, err = fastpb.ReadBool(buf, _type)
			if err != nil {
				return offset, err
			}
			x.Success = append(x.Success, v)
			return offset, err
		})
	return offset, err
}

func (x *EmailRefreshRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_EmailRefreshRequest[number], err)
}

func (x *EmailRefreshRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Email = append(x.Email, v)
	return offset, err
}

func (x *EmailRefreshResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_EmailRefreshResponse[number], err)
}

func (x *EmailRefreshResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v bool
			v, offset, err = fastpb.ReadBool(buf, _type)
			if err != nil {
				return offset, err
			}
			x.Success = append(x.Success, v)
			return offset, err
		})
	return offset, err
}

func (x *EmailCaptchaRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *EmailCaptchaRequest) fastWriteField1(buf []byte) (offset int) {
	if len(x.Email) == 0 {
		return offset
	}
	for i := range x.GetEmail() {
		offset += fastpb.WriteString(buf[offset:], 1, x.GetEmail()[i])
	}
	return offset
}

func (x *EmailCaptchaResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *EmailCaptchaResponse) fastWriteField1(buf []byte) (offset int) {
	if len(x.Success) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 1, len(x.GetSuccess()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteBool(buf[offset:], numTagOrKey, x.GetSuccess()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *EmailValidateList) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *EmailValidateList) fastWriteField1(buf []byte) (offset int) {
	if x.Email == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetEmail())
	return offset
}

func (x *EmailValidateList) fastWriteField2(buf []byte) (offset int) {
	if x.Captcha == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetCaptcha())
	return offset
}

func (x *EmailValidateRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *EmailValidateRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Lists == nil {
		return offset
	}
	for i := range x.GetLists() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetLists()[i])
	}
	return offset
}

func (x *EmailValidateResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *EmailValidateResponse) fastWriteField1(buf []byte) (offset int) {
	if len(x.Success) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 1, len(x.GetSuccess()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteBool(buf[offset:], numTagOrKey, x.GetSuccess()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *EmailRefreshRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *EmailRefreshRequest) fastWriteField1(buf []byte) (offset int) {
	if len(x.Email) == 0 {
		return offset
	}
	for i := range x.GetEmail() {
		offset += fastpb.WriteString(buf[offset:], 1, x.GetEmail()[i])
	}
	return offset
}

func (x *EmailRefreshResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *EmailRefreshResponse) fastWriteField1(buf []byte) (offset int) {
	if len(x.Success) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 1, len(x.GetSuccess()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteBool(buf[offset:], numTagOrKey, x.GetSuccess()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *EmailCaptchaRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *EmailCaptchaRequest) sizeField1() (n int) {
	if len(x.Email) == 0 {
		return n
	}
	for i := range x.GetEmail() {
		n += fastpb.SizeString(1, x.GetEmail()[i])
	}
	return n
}

func (x *EmailCaptchaResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *EmailCaptchaResponse) sizeField1() (n int) {
	if len(x.Success) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(1, len(x.GetSuccess()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeBool(numTagOrKey, x.GetSuccess()[numIdxOrVal])
			return n
		})
	return n
}

func (x *EmailValidateList) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *EmailValidateList) sizeField1() (n int) {
	if x.Email == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetEmail())
	return n
}

func (x *EmailValidateList) sizeField2() (n int) {
	if x.Captcha == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetCaptcha())
	return n
}

func (x *EmailValidateRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *EmailValidateRequest) sizeField1() (n int) {
	if x.Lists == nil {
		return n
	}
	for i := range x.GetLists() {
		n += fastpb.SizeMessage(1, x.GetLists()[i])
	}
	return n
}

func (x *EmailValidateResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *EmailValidateResponse) sizeField1() (n int) {
	if len(x.Success) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(1, len(x.GetSuccess()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeBool(numTagOrKey, x.GetSuccess()[numIdxOrVal])
			return n
		})
	return n
}

func (x *EmailRefreshRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *EmailRefreshRequest) sizeField1() (n int) {
	if len(x.Email) == 0 {
		return n
	}
	for i := range x.GetEmail() {
		n += fastpb.SizeString(1, x.GetEmail()[i])
	}
	return n
}

func (x *EmailRefreshResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *EmailRefreshResponse) sizeField1() (n int) {
	if len(x.Success) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(1, len(x.GetSuccess()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeBool(numTagOrKey, x.GetSuccess()[numIdxOrVal])
			return n
		})
	return n
}

var fieldIDToName_EmailCaptchaRequest = map[int32]string{
	1: "Email",
}

var fieldIDToName_EmailCaptchaResponse = map[int32]string{
	1: "Success",
}

var fieldIDToName_EmailValidateList = map[int32]string{
	1: "Email",
	2: "Captcha",
}

var fieldIDToName_EmailValidateRequest = map[int32]string{
	1: "Lists",
}

var fieldIDToName_EmailValidateResponse = map[int32]string{
	1: "Success",
}

var fieldIDToName_EmailRefreshRequest = map[int32]string{
	1: "Email",
}

var fieldIDToName_EmailRefreshResponse = map[int32]string{
	1: "Success",
}
