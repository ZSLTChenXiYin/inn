// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package file

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *UploadList) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UploadList[number], err)
}

func (x *UploadList) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UploadList) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.FilePath, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UploadList) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.OwnerId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UploadList) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.AccessLevel, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *UploadList) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.FilePassword, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UploadRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UploadRequest[number], err)
}

func (x *UploadRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v UploadList
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Lists = append(x.Lists, &v)
	return offset, nil
}

func (x *UploadResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UploadResponse[number], err)
}

func (x *UploadResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.FileId = append(x.FileId, v)
	return offset, err
}

func (x *DownloadList) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DownloadList[number], err)
}

func (x *DownloadList) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DownloadList) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DownloadList) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.FilePassword, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DownloadRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DownloadRequest[number], err)
}

func (x *DownloadRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v DownloadList
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Lists = append(x.Lists, &v)
	return offset, nil
}

func (x *DownloadInfo) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DownloadInfo[number], err)
}

func (x *DownloadInfo) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DownloadInfo) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.FilePath, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DownloadInfo) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.FileSize, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *DownloadInfo) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.CheckSum, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DownloadResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DownloadResponse[number], err)
}

func (x *DownloadResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v DownloadInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Files = append(x.Files, &v)
	return offset, nil
}

func (x *CheckRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CheckRequest[number], err)
}

func (x *CheckRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.OwnerId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CheckRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CheckResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CheckResponse[number], err)
}

func (x *CheckResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.FileId = append(x.FileId, v)
	return offset, err
}

func (x *DeleteFile) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteFile[number], err)
}

func (x *DeleteFile) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteFile) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteRequest[number], err)
}

func (x *DeleteRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v DeleteFile
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Files = append(x.Files, &v)
	return offset, nil
}

func (x *DeleteResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteResponse[number], err)
}

func (x *DeleteResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v bool
			v, offset, err = fastpb.ReadBool(buf, _type)
			if err != nil {
				return offset, err
			}
			x.Success = append(x.Success, v)
			return offset, err
		})
	return offset, err
}

func (x *DetailFile) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DetailFile[number], err)
}

func (x *DetailFile) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DetailFile) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DetailRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DetailRequest[number], err)
}

func (x *DetailRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v DetailFile
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Files = append(x.Files, &v)
	return offset, nil
}

func (x *DetailInfo) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DetailInfo[number], err)
}

func (x *DetailInfo) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DetailInfo) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.OwnerId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DetailInfo) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.AccessLevel, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *DetailInfo) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.FileSize, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *DetailResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DetailResponse[number], err)
}

func (x *DetailResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v DetailInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Files = append(x.Files, &v)
	return offset, nil
}

func (x *UpdateFile) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateFile[number], err)
}

func (x *UpdateFile) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateFile) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateFile) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.FilePassword, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateFile) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.NewAccessLevel, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *UpdateFile) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.NewFileName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateFile) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.NewFilePath, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateFile) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.NewFilePassword, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateRequest[number], err)
}

func (x *UpdateRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v UpdateFile
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Files = append(x.Files, &v)
	return offset, nil
}

func (x *UpdateResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateResponse[number], err)
}

func (x *UpdateResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v bool
			v, offset, err = fastpb.ReadBool(buf, _type)
			if err != nil {
				return offset, err
			}
			x.Success = append(x.Success, v)
			return offset, err
		})
	return offset, err
}

func (x *UploadList) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *UploadList) fastWriteField1(buf []byte) (offset int) {
	if x.FileName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFileName())
	return offset
}

func (x *UploadList) fastWriteField2(buf []byte) (offset int) {
	if x.FilePath == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetFilePath())
	return offset
}

func (x *UploadList) fastWriteField3(buf []byte) (offset int) {
	if x.OwnerId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetOwnerId())
	return offset
}

func (x *UploadList) fastWriteField4(buf []byte) (offset int) {
	if x.AccessLevel == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 4, x.GetAccessLevel())
	return offset
}

func (x *UploadList) fastWriteField5(buf []byte) (offset int) {
	if x.FilePassword == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetFilePassword())
	return offset
}

func (x *UploadRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UploadRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Lists == nil {
		return offset
	}
	for i := range x.GetLists() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetLists()[i])
	}
	return offset
}

func (x *UploadResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UploadResponse) fastWriteField1(buf []byte) (offset int) {
	if len(x.FileId) == 0 {
		return offset
	}
	for i := range x.GetFileId() {
		offset += fastpb.WriteString(buf[offset:], 1, x.GetFileId()[i])
	}
	return offset
}

func (x *DownloadList) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *DownloadList) fastWriteField1(buf []byte) (offset int) {
	if x.FileId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFileId())
	return offset
}

func (x *DownloadList) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *DownloadList) fastWriteField3(buf []byte) (offset int) {
	if x.FilePassword == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetFilePassword())
	return offset
}

func (x *DownloadRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DownloadRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Lists == nil {
		return offset
	}
	for i := range x.GetLists() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetLists()[i])
	}
	return offset
}

func (x *DownloadInfo) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *DownloadInfo) fastWriteField1(buf []byte) (offset int) {
	if x.FileName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFileName())
	return offset
}

func (x *DownloadInfo) fastWriteField2(buf []byte) (offset int) {
	if x.FilePath == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetFilePath())
	return offset
}

func (x *DownloadInfo) fastWriteField3(buf []byte) (offset int) {
	if x.FileSize == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 3, x.GetFileSize())
	return offset
}

func (x *DownloadInfo) fastWriteField4(buf []byte) (offset int) {
	if x.CheckSum == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetCheckSum())
	return offset
}

func (x *DownloadResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DownloadResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Files == nil {
		return offset
	}
	for i := range x.GetFiles() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFiles()[i])
	}
	return offset
}

func (x *CheckRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CheckRequest) fastWriteField1(buf []byte) (offset int) {
	if x.OwnerId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetOwnerId())
	return offset
}

func (x *CheckRequest) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *CheckResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CheckResponse) fastWriteField1(buf []byte) (offset int) {
	if len(x.FileId) == 0 {
		return offset
	}
	for i := range x.GetFileId() {
		offset += fastpb.WriteString(buf[offset:], 1, x.GetFileId()[i])
	}
	return offset
}

func (x *DeleteFile) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *DeleteFile) fastWriteField1(buf []byte) (offset int) {
	if x.FileId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFileId())
	return offset
}

func (x *DeleteFile) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *DeleteRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Files == nil {
		return offset
	}
	for i := range x.GetFiles() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFiles()[i])
	}
	return offset
}

func (x *DeleteResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteResponse) fastWriteField1(buf []byte) (offset int) {
	if len(x.Success) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 1, len(x.GetSuccess()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteBool(buf[offset:], numTagOrKey, x.GetSuccess()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *DetailFile) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *DetailFile) fastWriteField1(buf []byte) (offset int) {
	if x.FileId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFileId())
	return offset
}

func (x *DetailFile) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *DetailRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DetailRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Files == nil {
		return offset
	}
	for i := range x.GetFiles() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFiles()[i])
	}
	return offset
}

func (x *DetailInfo) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *DetailInfo) fastWriteField1(buf []byte) (offset int) {
	if x.FileName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFileName())
	return offset
}

func (x *DetailInfo) fastWriteField2(buf []byte) (offset int) {
	if x.OwnerId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetOwnerId())
	return offset
}

func (x *DetailInfo) fastWriteField3(buf []byte) (offset int) {
	if x.AccessLevel == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 3, x.GetAccessLevel())
	return offset
}

func (x *DetailInfo) fastWriteField4(buf []byte) (offset int) {
	if x.FileSize == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 4, x.GetFileSize())
	return offset
}

func (x *DetailResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DetailResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Files == nil {
		return offset
	}
	for i := range x.GetFiles() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFiles()[i])
	}
	return offset
}

func (x *UpdateFile) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	return offset
}

func (x *UpdateFile) fastWriteField1(buf []byte) (offset int) {
	if x.FileId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFileId())
	return offset
}

func (x *UpdateFile) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *UpdateFile) fastWriteField3(buf []byte) (offset int) {
	if x.FilePassword == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetFilePassword())
	return offset
}

func (x *UpdateFile) fastWriteField4(buf []byte) (offset int) {
	if x.NewAccessLevel == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 4, x.GetNewAccessLevel())
	return offset
}

func (x *UpdateFile) fastWriteField5(buf []byte) (offset int) {
	if x.NewFileName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetNewFileName())
	return offset
}

func (x *UpdateFile) fastWriteField6(buf []byte) (offset int) {
	if x.NewFilePath == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetNewFilePath())
	return offset
}

func (x *UpdateFile) fastWriteField7(buf []byte) (offset int) {
	if x.NewFilePassword == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetNewFilePassword())
	return offset
}

func (x *UpdateRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdateRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Files == nil {
		return offset
	}
	for i := range x.GetFiles() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFiles()[i])
	}
	return offset
}

func (x *UpdateResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdateResponse) fastWriteField1(buf []byte) (offset int) {
	if len(x.Success) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 1, len(x.GetSuccess()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteBool(buf[offset:], numTagOrKey, x.GetSuccess()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *UploadList) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *UploadList) sizeField1() (n int) {
	if x.FileName == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFileName())
	return n
}

func (x *UploadList) sizeField2() (n int) {
	if x.FilePath == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetFilePath())
	return n
}

func (x *UploadList) sizeField3() (n int) {
	if x.OwnerId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetOwnerId())
	return n
}

func (x *UploadList) sizeField4() (n int) {
	if x.AccessLevel == 0 {
		return n
	}
	n += fastpb.SizeUint32(4, x.GetAccessLevel())
	return n
}

func (x *UploadList) sizeField5() (n int) {
	if x.FilePassword == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetFilePassword())
	return n
}

func (x *UploadRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UploadRequest) sizeField1() (n int) {
	if x.Lists == nil {
		return n
	}
	for i := range x.GetLists() {
		n += fastpb.SizeMessage(1, x.GetLists()[i])
	}
	return n
}

func (x *UploadResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UploadResponse) sizeField1() (n int) {
	if len(x.FileId) == 0 {
		return n
	}
	for i := range x.GetFileId() {
		n += fastpb.SizeString(1, x.GetFileId()[i])
	}
	return n
}

func (x *DownloadList) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *DownloadList) sizeField1() (n int) {
	if x.FileId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFileId())
	return n
}

func (x *DownloadList) sizeField2() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserId())
	return n
}

func (x *DownloadList) sizeField3() (n int) {
	if x.FilePassword == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetFilePassword())
	return n
}

func (x *DownloadRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DownloadRequest) sizeField1() (n int) {
	if x.Lists == nil {
		return n
	}
	for i := range x.GetLists() {
		n += fastpb.SizeMessage(1, x.GetLists()[i])
	}
	return n
}

func (x *DownloadInfo) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *DownloadInfo) sizeField1() (n int) {
	if x.FileName == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFileName())
	return n
}

func (x *DownloadInfo) sizeField2() (n int) {
	if x.FilePath == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetFilePath())
	return n
}

func (x *DownloadInfo) sizeField3() (n int) {
	if x.FileSize == 0 {
		return n
	}
	n += fastpb.SizeUint64(3, x.GetFileSize())
	return n
}

func (x *DownloadInfo) sizeField4() (n int) {
	if x.CheckSum == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetCheckSum())
	return n
}

func (x *DownloadResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DownloadResponse) sizeField1() (n int) {
	if x.Files == nil {
		return n
	}
	for i := range x.GetFiles() {
		n += fastpb.SizeMessage(1, x.GetFiles()[i])
	}
	return n
}

func (x *CheckRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CheckRequest) sizeField1() (n int) {
	if x.OwnerId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetOwnerId())
	return n
}

func (x *CheckRequest) sizeField2() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserId())
	return n
}

func (x *CheckResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CheckResponse) sizeField1() (n int) {
	if len(x.FileId) == 0 {
		return n
	}
	for i := range x.GetFileId() {
		n += fastpb.SizeString(1, x.GetFileId()[i])
	}
	return n
}

func (x *DeleteFile) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *DeleteFile) sizeField1() (n int) {
	if x.FileId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFileId())
	return n
}

func (x *DeleteFile) sizeField2() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserId())
	return n
}

func (x *DeleteRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteRequest) sizeField1() (n int) {
	if x.Files == nil {
		return n
	}
	for i := range x.GetFiles() {
		n += fastpb.SizeMessage(1, x.GetFiles()[i])
	}
	return n
}

func (x *DeleteResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteResponse) sizeField1() (n int) {
	if len(x.Success) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(1, len(x.GetSuccess()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeBool(numTagOrKey, x.GetSuccess()[numIdxOrVal])
			return n
		})
	return n
}

func (x *DetailFile) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *DetailFile) sizeField1() (n int) {
	if x.FileId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFileId())
	return n
}

func (x *DetailFile) sizeField2() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserId())
	return n
}

func (x *DetailRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DetailRequest) sizeField1() (n int) {
	if x.Files == nil {
		return n
	}
	for i := range x.GetFiles() {
		n += fastpb.SizeMessage(1, x.GetFiles()[i])
	}
	return n
}

func (x *DetailInfo) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *DetailInfo) sizeField1() (n int) {
	if x.FileName == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFileName())
	return n
}

func (x *DetailInfo) sizeField2() (n int) {
	if x.OwnerId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetOwnerId())
	return n
}

func (x *DetailInfo) sizeField3() (n int) {
	if x.AccessLevel == 0 {
		return n
	}
	n += fastpb.SizeUint32(3, x.GetAccessLevel())
	return n
}

func (x *DetailInfo) sizeField4() (n int) {
	if x.FileSize == 0 {
		return n
	}
	n += fastpb.SizeUint64(4, x.GetFileSize())
	return n
}

func (x *DetailResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DetailResponse) sizeField1() (n int) {
	if x.Files == nil {
		return n
	}
	for i := range x.GetFiles() {
		n += fastpb.SizeMessage(1, x.GetFiles()[i])
	}
	return n
}

func (x *UpdateFile) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	return n
}

func (x *UpdateFile) sizeField1() (n int) {
	if x.FileId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFileId())
	return n
}

func (x *UpdateFile) sizeField2() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserId())
	return n
}

func (x *UpdateFile) sizeField3() (n int) {
	if x.FilePassword == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetFilePassword())
	return n
}

func (x *UpdateFile) sizeField4() (n int) {
	if x.NewAccessLevel == 0 {
		return n
	}
	n += fastpb.SizeUint32(4, x.GetNewAccessLevel())
	return n
}

func (x *UpdateFile) sizeField5() (n int) {
	if x.NewFileName == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetNewFileName())
	return n
}

func (x *UpdateFile) sizeField6() (n int) {
	if x.NewFilePath == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetNewFilePath())
	return n
}

func (x *UpdateFile) sizeField7() (n int) {
	if x.NewFilePassword == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetNewFilePassword())
	return n
}

func (x *UpdateRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdateRequest) sizeField1() (n int) {
	if x.Files == nil {
		return n
	}
	for i := range x.GetFiles() {
		n += fastpb.SizeMessage(1, x.GetFiles()[i])
	}
	return n
}

func (x *UpdateResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdateResponse) sizeField1() (n int) {
	if len(x.Success) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(1, len(x.GetSuccess()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeBool(numTagOrKey, x.GetSuccess()[numIdxOrVal])
			return n
		})
	return n
}

var fieldIDToName_UploadList = map[int32]string{
	1: "FileName",
	2: "FilePath",
	3: "OwnerId",
	4: "AccessLevel",
	5: "FilePassword",
}

var fieldIDToName_UploadRequest = map[int32]string{
	1: "Lists",
}

var fieldIDToName_UploadResponse = map[int32]string{
	1: "FileId",
}

var fieldIDToName_DownloadList = map[int32]string{
	1: "FileId",
	2: "UserId",
	3: "FilePassword",
}

var fieldIDToName_DownloadRequest = map[int32]string{
	1: "Lists",
}

var fieldIDToName_DownloadInfo = map[int32]string{
	1: "FileName",
	2: "FilePath",
	3: "FileSize",
	4: "CheckSum",
}

var fieldIDToName_DownloadResponse = map[int32]string{
	1: "Files",
}

var fieldIDToName_CheckRequest = map[int32]string{
	1: "OwnerId",
	2: "UserId",
}

var fieldIDToName_CheckResponse = map[int32]string{
	1: "FileId",
}

var fieldIDToName_DeleteFile = map[int32]string{
	1: "FileId",
	2: "UserId",
}

var fieldIDToName_DeleteRequest = map[int32]string{
	1: "Files",
}

var fieldIDToName_DeleteResponse = map[int32]string{
	1: "Success",
}

var fieldIDToName_DetailFile = map[int32]string{
	1: "FileId",
	2: "UserId",
}

var fieldIDToName_DetailRequest = map[int32]string{
	1: "Files",
}

var fieldIDToName_DetailInfo = map[int32]string{
	1: "FileName",
	2: "OwnerId",
	3: "AccessLevel",
	4: "FileSize",
}

var fieldIDToName_DetailResponse = map[int32]string{
	1: "Files",
}

var fieldIDToName_UpdateFile = map[int32]string{
	1: "FileId",
	2: "UserId",
	3: "FilePassword",
	4: "NewAccessLevel",
	5: "NewFileName",
	6: "NewFilePath",
	7: "NewFilePassword",
}

var fieldIDToName_UpdateRequest = map[int32]string{
	1: "Files",
}

var fieldIDToName_UpdateResponse = map[int32]string{
	1: "Success",
}
