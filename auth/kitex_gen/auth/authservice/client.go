// Code generated by Kitex v0.9.1. DO NOT EDIT.

package authservice

import (
	auth "auth/kitex_gen/auth"
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Token(ctx context.Context, Req *auth.TokenRequest, callOptions ...callopt.Option) (r *auth.TokenResponse, err error)
	Validate(ctx context.Context, Req *auth.ValidateRequest, callOptions ...callopt.Option) (r *auth.ValidateResponse, err error)
	Refresh(ctx context.Context, Req *auth.RefreshRequest, callOptions ...callopt.Option) (r *auth.RefreshResponse, err error)
	Revoke(ctx context.Context, Req *auth.RevokeRequest, callOptions ...callopt.Option) (r *auth.RevokeResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kAuthServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kAuthServiceClient struct {
	*kClient
}

func (p *kAuthServiceClient) Token(ctx context.Context, Req *auth.TokenRequest, callOptions ...callopt.Option) (r *auth.TokenResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Token(ctx, Req)
}

func (p *kAuthServiceClient) Validate(ctx context.Context, Req *auth.ValidateRequest, callOptions ...callopt.Option) (r *auth.ValidateResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Validate(ctx, Req)
}

func (p *kAuthServiceClient) Refresh(ctx context.Context, Req *auth.RefreshRequest, callOptions ...callopt.Option) (r *auth.RefreshResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Refresh(ctx, Req)
}

func (p *kAuthServiceClient) Revoke(ctx context.Context, Req *auth.RevokeRequest, callOptions ...callopt.Option) (r *auth.RevokeResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Revoke(ctx, Req)
}
