// Code generated by Kitex v0.9.1. DO NOT EDIT.

package captchaservice

import (
	captcha "captcha/kitex_gen/captcha"
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"EmailCaptcha": kitex.NewMethodInfo(
		emailCaptchaHandler,
		newEmailCaptchaArgs,
		newEmailCaptchaResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"EmailValidate": kitex.NewMethodInfo(
		emailValidateHandler,
		newEmailValidateArgs,
		newEmailValidateResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"EmailRefresh": kitex.NewMethodInfo(
		emailRefreshHandler,
		newEmailRefreshArgs,
		newEmailRefreshResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	captchaServiceServiceInfo                = NewServiceInfo()
	captchaServiceServiceInfoForClient       = NewServiceInfoForClient()
	captchaServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return captchaServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return captchaServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return captchaServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "CaptchaService"
	handlerType := (*captcha.CaptchaService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "captcha",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func emailCaptchaHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(captcha.EmailCaptchaRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(captcha.CaptchaService).EmailCaptcha(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *EmailCaptchaArgs:
		success, err := handler.(captcha.CaptchaService).EmailCaptcha(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*EmailCaptchaResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newEmailCaptchaArgs() interface{} {
	return &EmailCaptchaArgs{}
}

func newEmailCaptchaResult() interface{} {
	return &EmailCaptchaResult{}
}

type EmailCaptchaArgs struct {
	Req *captcha.EmailCaptchaRequest
}

func (p *EmailCaptchaArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(captcha.EmailCaptchaRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *EmailCaptchaArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *EmailCaptchaArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *EmailCaptchaArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *EmailCaptchaArgs) Unmarshal(in []byte) error {
	msg := new(captcha.EmailCaptchaRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var EmailCaptchaArgs_Req_DEFAULT *captcha.EmailCaptchaRequest

func (p *EmailCaptchaArgs) GetReq() *captcha.EmailCaptchaRequest {
	if !p.IsSetReq() {
		return EmailCaptchaArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *EmailCaptchaArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EmailCaptchaArgs) GetFirstArgument() interface{} {
	return p.Req
}

type EmailCaptchaResult struct {
	Success *captcha.EmailCaptchaResponse
}

var EmailCaptchaResult_Success_DEFAULT *captcha.EmailCaptchaResponse

func (p *EmailCaptchaResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(captcha.EmailCaptchaResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *EmailCaptchaResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *EmailCaptchaResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *EmailCaptchaResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *EmailCaptchaResult) Unmarshal(in []byte) error {
	msg := new(captcha.EmailCaptchaResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *EmailCaptchaResult) GetSuccess() *captcha.EmailCaptchaResponse {
	if !p.IsSetSuccess() {
		return EmailCaptchaResult_Success_DEFAULT
	}
	return p.Success
}

func (p *EmailCaptchaResult) SetSuccess(x interface{}) {
	p.Success = x.(*captcha.EmailCaptchaResponse)
}

func (p *EmailCaptchaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EmailCaptchaResult) GetResult() interface{} {
	return p.Success
}

func emailValidateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(captcha.EmailValidateRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(captcha.CaptchaService).EmailValidate(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *EmailValidateArgs:
		success, err := handler.(captcha.CaptchaService).EmailValidate(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*EmailValidateResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newEmailValidateArgs() interface{} {
	return &EmailValidateArgs{}
}

func newEmailValidateResult() interface{} {
	return &EmailValidateResult{}
}

type EmailValidateArgs struct {
	Req *captcha.EmailValidateRequest
}

func (p *EmailValidateArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(captcha.EmailValidateRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *EmailValidateArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *EmailValidateArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *EmailValidateArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *EmailValidateArgs) Unmarshal(in []byte) error {
	msg := new(captcha.EmailValidateRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var EmailValidateArgs_Req_DEFAULT *captcha.EmailValidateRequest

func (p *EmailValidateArgs) GetReq() *captcha.EmailValidateRequest {
	if !p.IsSetReq() {
		return EmailValidateArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *EmailValidateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EmailValidateArgs) GetFirstArgument() interface{} {
	return p.Req
}

type EmailValidateResult struct {
	Success *captcha.EmailValidateResponse
}

var EmailValidateResult_Success_DEFAULT *captcha.EmailValidateResponse

func (p *EmailValidateResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(captcha.EmailValidateResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *EmailValidateResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *EmailValidateResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *EmailValidateResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *EmailValidateResult) Unmarshal(in []byte) error {
	msg := new(captcha.EmailValidateResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *EmailValidateResult) GetSuccess() *captcha.EmailValidateResponse {
	if !p.IsSetSuccess() {
		return EmailValidateResult_Success_DEFAULT
	}
	return p.Success
}

func (p *EmailValidateResult) SetSuccess(x interface{}) {
	p.Success = x.(*captcha.EmailValidateResponse)
}

func (p *EmailValidateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EmailValidateResult) GetResult() interface{} {
	return p.Success
}

func emailRefreshHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(captcha.EmailRefreshRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(captcha.CaptchaService).EmailRefresh(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *EmailRefreshArgs:
		success, err := handler.(captcha.CaptchaService).EmailRefresh(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*EmailRefreshResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newEmailRefreshArgs() interface{} {
	return &EmailRefreshArgs{}
}

func newEmailRefreshResult() interface{} {
	return &EmailRefreshResult{}
}

type EmailRefreshArgs struct {
	Req *captcha.EmailRefreshRequest
}

func (p *EmailRefreshArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(captcha.EmailRefreshRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *EmailRefreshArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *EmailRefreshArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *EmailRefreshArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *EmailRefreshArgs) Unmarshal(in []byte) error {
	msg := new(captcha.EmailRefreshRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var EmailRefreshArgs_Req_DEFAULT *captcha.EmailRefreshRequest

func (p *EmailRefreshArgs) GetReq() *captcha.EmailRefreshRequest {
	if !p.IsSetReq() {
		return EmailRefreshArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *EmailRefreshArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EmailRefreshArgs) GetFirstArgument() interface{} {
	return p.Req
}

type EmailRefreshResult struct {
	Success *captcha.EmailRefreshResponse
}

var EmailRefreshResult_Success_DEFAULT *captcha.EmailRefreshResponse

func (p *EmailRefreshResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(captcha.EmailRefreshResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *EmailRefreshResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *EmailRefreshResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *EmailRefreshResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *EmailRefreshResult) Unmarshal(in []byte) error {
	msg := new(captcha.EmailRefreshResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *EmailRefreshResult) GetSuccess() *captcha.EmailRefreshResponse {
	if !p.IsSetSuccess() {
		return EmailRefreshResult_Success_DEFAULT
	}
	return p.Success
}

func (p *EmailRefreshResult) SetSuccess(x interface{}) {
	p.Success = x.(*captcha.EmailRefreshResponse)
}

func (p *EmailRefreshResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EmailRefreshResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) EmailCaptcha(ctx context.Context, Req *captcha.EmailCaptchaRequest) (r *captcha.EmailCaptchaResponse, err error) {
	var _args EmailCaptchaArgs
	_args.Req = Req
	var _result EmailCaptchaResult
	if err = p.c.Call(ctx, "EmailCaptcha", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EmailValidate(ctx context.Context, Req *captcha.EmailValidateRequest) (r *captcha.EmailValidateResponse, err error) {
	var _args EmailValidateArgs
	_args.Req = Req
	var _result EmailValidateResult
	if err = p.c.Call(ctx, "EmailValidate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EmailRefresh(ctx context.Context, Req *captcha.EmailRefreshRequest) (r *captcha.EmailRefreshResponse, err error) {
	var _args EmailRefreshArgs
	_args.Req = Req
	var _result EmailRefreshResult
	if err = p.c.Call(ctx, "EmailRefresh", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
