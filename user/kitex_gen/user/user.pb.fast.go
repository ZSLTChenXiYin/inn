// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package user

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Login) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Login[number], err)
}

func (x *Login) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Email, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Login) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Password, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *LoginRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_LoginRequest[number], err)
}

func (x *LoginRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Login
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Logins = append(x.Logins, &v)
	return offset, nil
}

func (x *LoginResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_LoginResponse[number], err)
}

func (x *LoginResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.UserId = append(x.UserId, v)
	return offset, err
}

func (x *Register) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Register[number], err)
}

func (x *Register) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Email, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Register) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Register) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Password, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RegisterRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RegisterRequest[number], err)
}

func (x *RegisterRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Register
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Registers = append(x.Registers, &v)
	return offset, nil
}

func (x *RegisterResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RegisterResponse[number], err)
}

func (x *RegisterResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.UserId = append(x.UserId, v)
	return offset, err
}

func (x *CheckRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CheckRequest[number], err)
}

func (x *CheckRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CheckResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CheckResponse[number], err)
}

func (x *CheckResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.UserId = append(x.UserId, v)
	return offset, err
}

func (x *LogoutRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_LogoutRequest[number], err)
}

func (x *LogoutRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.UserId = append(x.UserId, v)
	return offset, err
}

func (x *LogoutResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_LogoutResponse[number], err)
}

func (x *LogoutResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v bool
			v, offset, err = fastpb.ReadBool(buf, _type)
			if err != nil {
				return offset, err
			}
			x.Success = append(x.Success, v)
			return offset, err
		})
	return offset, err
}

func (x *DetailRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DetailRequest[number], err)
}

func (x *DetailRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.UserId = append(x.UserId, v)
	return offset, err
}

func (x *DetailInfo) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DetailInfo[number], err)
}

func (x *DetailInfo) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DetailInfo) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Email, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DetailInfo) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Signature, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DetailInfo) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Picture, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DetailInfo) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.CreatedAt, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DetailResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DetailResponse[number], err)
}

func (x *DetailResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v DetailInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Details = append(x.Details, &v)
	return offset, nil
}

func (x *Update) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Update[number], err)
}

func (x *Update) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Update) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.NewUserName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Update) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.NewSignature, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Update) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.NewPicture, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Update) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.NewPassword, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateRequest[number], err)
}

func (x *UpdateRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Update
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Updates = append(x.Updates, &v)
	return offset, nil
}

func (x *UpdateResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateResponse[number], err)
}

func (x *UpdateResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v bool
			v, offset, err = fastpb.ReadBool(buf, _type)
			if err != nil {
				return offset, err
			}
			x.Success = append(x.Success, v)
			return offset, err
		})
	return offset, err
}

func (x *Login) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *Login) fastWriteField1(buf []byte) (offset int) {
	if x.Email == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetEmail())
	return offset
}

func (x *Login) fastWriteField2(buf []byte) (offset int) {
	if x.Password == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetPassword())
	return offset
}

func (x *LoginRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *LoginRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Logins == nil {
		return offset
	}
	for i := range x.GetLogins() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetLogins()[i])
	}
	return offset
}

func (x *LoginResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *LoginResponse) fastWriteField1(buf []byte) (offset int) {
	if len(x.UserId) == 0 {
		return offset
	}
	for i := range x.GetUserId() {
		offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId()[i])
	}
	return offset
}

func (x *Register) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *Register) fastWriteField1(buf []byte) (offset int) {
	if x.Email == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetEmail())
	return offset
}

func (x *Register) fastWriteField2(buf []byte) (offset int) {
	if x.UserName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserName())
	return offset
}

func (x *Register) fastWriteField3(buf []byte) (offset int) {
	if x.Password == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetPassword())
	return offset
}

func (x *RegisterRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *RegisterRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Registers == nil {
		return offset
	}
	for i := range x.GetRegisters() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetRegisters()[i])
	}
	return offset
}

func (x *RegisterResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *RegisterResponse) fastWriteField1(buf []byte) (offset int) {
	if len(x.UserId) == 0 {
		return offset
	}
	for i := range x.GetUserId() {
		offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId()[i])
	}
	return offset
}

func (x *CheckRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CheckRequest) fastWriteField1(buf []byte) (offset int) {
	if x.UserName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserName())
	return offset
}

func (x *CheckResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CheckResponse) fastWriteField1(buf []byte) (offset int) {
	if len(x.UserId) == 0 {
		return offset
	}
	for i := range x.GetUserId() {
		offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId()[i])
	}
	return offset
}

func (x *LogoutRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *LogoutRequest) fastWriteField1(buf []byte) (offset int) {
	if len(x.UserId) == 0 {
		return offset
	}
	for i := range x.GetUserId() {
		offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId()[i])
	}
	return offset
}

func (x *LogoutResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *LogoutResponse) fastWriteField1(buf []byte) (offset int) {
	if len(x.Success) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 1, len(x.GetSuccess()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteBool(buf[offset:], numTagOrKey, x.GetSuccess()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *DetailRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DetailRequest) fastWriteField1(buf []byte) (offset int) {
	if len(x.UserId) == 0 {
		return offset
	}
	for i := range x.GetUserId() {
		offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId()[i])
	}
	return offset
}

func (x *DetailInfo) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *DetailInfo) fastWriteField1(buf []byte) (offset int) {
	if x.UserName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserName())
	return offset
}

func (x *DetailInfo) fastWriteField2(buf []byte) (offset int) {
	if x.Email == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetEmail())
	return offset
}

func (x *DetailInfo) fastWriteField3(buf []byte) (offset int) {
	if x.Signature == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetSignature())
	return offset
}

func (x *DetailInfo) fastWriteField4(buf []byte) (offset int) {
	if x.Picture == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetPicture())
	return offset
}

func (x *DetailInfo) fastWriteField5(buf []byte) (offset int) {
	if x.CreatedAt == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetCreatedAt())
	return offset
}

func (x *DetailResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DetailResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Details == nil {
		return offset
	}
	for i := range x.GetDetails() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetDetails()[i])
	}
	return offset
}

func (x *Update) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *Update) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *Update) fastWriteField2(buf []byte) (offset int) {
	if x.NewUserName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetNewUserName())
	return offset
}

func (x *Update) fastWriteField3(buf []byte) (offset int) {
	if x.NewSignature == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetNewSignature())
	return offset
}

func (x *Update) fastWriteField4(buf []byte) (offset int) {
	if x.NewPicture == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetNewPicture())
	return offset
}

func (x *Update) fastWriteField5(buf []byte) (offset int) {
	if x.NewPassword == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetNewPassword())
	return offset
}

func (x *UpdateRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdateRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Updates == nil {
		return offset
	}
	for i := range x.GetUpdates() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetUpdates()[i])
	}
	return offset
}

func (x *UpdateResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdateResponse) fastWriteField1(buf []byte) (offset int) {
	if len(x.Success) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 1, len(x.GetSuccess()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteBool(buf[offset:], numTagOrKey, x.GetSuccess()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *Login) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *Login) sizeField1() (n int) {
	if x.Email == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetEmail())
	return n
}

func (x *Login) sizeField2() (n int) {
	if x.Password == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetPassword())
	return n
}

func (x *LoginRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *LoginRequest) sizeField1() (n int) {
	if x.Logins == nil {
		return n
	}
	for i := range x.GetLogins() {
		n += fastpb.SizeMessage(1, x.GetLogins()[i])
	}
	return n
}

func (x *LoginResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *LoginResponse) sizeField1() (n int) {
	if len(x.UserId) == 0 {
		return n
	}
	for i := range x.GetUserId() {
		n += fastpb.SizeString(1, x.GetUserId()[i])
	}
	return n
}

func (x *Register) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *Register) sizeField1() (n int) {
	if x.Email == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetEmail())
	return n
}

func (x *Register) sizeField2() (n int) {
	if x.UserName == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserName())
	return n
}

func (x *Register) sizeField3() (n int) {
	if x.Password == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetPassword())
	return n
}

func (x *RegisterRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *RegisterRequest) sizeField1() (n int) {
	if x.Registers == nil {
		return n
	}
	for i := range x.GetRegisters() {
		n += fastpb.SizeMessage(1, x.GetRegisters()[i])
	}
	return n
}

func (x *RegisterResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *RegisterResponse) sizeField1() (n int) {
	if len(x.UserId) == 0 {
		return n
	}
	for i := range x.GetUserId() {
		n += fastpb.SizeString(1, x.GetUserId()[i])
	}
	return n
}

func (x *CheckRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CheckRequest) sizeField1() (n int) {
	if x.UserName == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserName())
	return n
}

func (x *CheckResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CheckResponse) sizeField1() (n int) {
	if len(x.UserId) == 0 {
		return n
	}
	for i := range x.GetUserId() {
		n += fastpb.SizeString(1, x.GetUserId()[i])
	}
	return n
}

func (x *LogoutRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *LogoutRequest) sizeField1() (n int) {
	if len(x.UserId) == 0 {
		return n
	}
	for i := range x.GetUserId() {
		n += fastpb.SizeString(1, x.GetUserId()[i])
	}
	return n
}

func (x *LogoutResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *LogoutResponse) sizeField1() (n int) {
	if len(x.Success) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(1, len(x.GetSuccess()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeBool(numTagOrKey, x.GetSuccess()[numIdxOrVal])
			return n
		})
	return n
}

func (x *DetailRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DetailRequest) sizeField1() (n int) {
	if len(x.UserId) == 0 {
		return n
	}
	for i := range x.GetUserId() {
		n += fastpb.SizeString(1, x.GetUserId()[i])
	}
	return n
}

func (x *DetailInfo) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *DetailInfo) sizeField1() (n int) {
	if x.UserName == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserName())
	return n
}

func (x *DetailInfo) sizeField2() (n int) {
	if x.Email == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetEmail())
	return n
}

func (x *DetailInfo) sizeField3() (n int) {
	if x.Signature == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetSignature())
	return n
}

func (x *DetailInfo) sizeField4() (n int) {
	if x.Picture == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetPicture())
	return n
}

func (x *DetailInfo) sizeField5() (n int) {
	if x.CreatedAt == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetCreatedAt())
	return n
}

func (x *DetailResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DetailResponse) sizeField1() (n int) {
	if x.Details == nil {
		return n
	}
	for i := range x.GetDetails() {
		n += fastpb.SizeMessage(1, x.GetDetails()[i])
	}
	return n
}

func (x *Update) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *Update) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *Update) sizeField2() (n int) {
	if x.NewUserName == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetNewUserName())
	return n
}

func (x *Update) sizeField3() (n int) {
	if x.NewSignature == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetNewSignature())
	return n
}

func (x *Update) sizeField4() (n int) {
	if x.NewPicture == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetNewPicture())
	return n
}

func (x *Update) sizeField5() (n int) {
	if x.NewPassword == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetNewPassword())
	return n
}

func (x *UpdateRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdateRequest) sizeField1() (n int) {
	if x.Updates == nil {
		return n
	}
	for i := range x.GetUpdates() {
		n += fastpb.SizeMessage(1, x.GetUpdates()[i])
	}
	return n
}

func (x *UpdateResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdateResponse) sizeField1() (n int) {
	if len(x.Success) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(1, len(x.GetSuccess()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeBool(numTagOrKey, x.GetSuccess()[numIdxOrVal])
			return n
		})
	return n
}

var fieldIDToName_Login = map[int32]string{
	1: "Email",
	2: "Password",
}

var fieldIDToName_LoginRequest = map[int32]string{
	1: "Logins",
}

var fieldIDToName_LoginResponse = map[int32]string{
	1: "UserId",
}

var fieldIDToName_Register = map[int32]string{
	1: "Email",
	2: "UserName",
	3: "Password",
}

var fieldIDToName_RegisterRequest = map[int32]string{
	1: "Registers",
}

var fieldIDToName_RegisterResponse = map[int32]string{
	1: "UserId",
}

var fieldIDToName_CheckRequest = map[int32]string{
	1: "UserName",
}

var fieldIDToName_CheckResponse = map[int32]string{
	1: "UserId",
}

var fieldIDToName_LogoutRequest = map[int32]string{
	1: "UserId",
}

var fieldIDToName_LogoutResponse = map[int32]string{
	1: "Success",
}

var fieldIDToName_DetailRequest = map[int32]string{
	1: "UserId",
}

var fieldIDToName_DetailInfo = map[int32]string{
	1: "UserName",
	2: "Email",
	3: "Signature",
	4: "Picture",
	5: "CreatedAt",
}

var fieldIDToName_DetailResponse = map[int32]string{
	1: "Details",
}

var fieldIDToName_Update = map[int32]string{
	1: "UserId",
	2: "NewUserName",
	3: "NewSignature",
	4: "NewPicture",
	5: "NewPassword",
}

var fieldIDToName_UpdateRequest = map[int32]string{
	1: "Updates",
}

var fieldIDToName_UpdateResponse = map[int32]string{
	1: "Success",
}
