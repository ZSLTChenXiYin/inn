// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package auth

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *TokenRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_TokenRequest[number], err)
}

func (x *TokenRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Id = append(x.Id, v)
	return offset, err
}

func (x *Token) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Token[number], err)
}

func (x *Token) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AccessToken, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Token) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.RefreshToken, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *TokenResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_TokenResponse[number], err)
}

func (x *TokenResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Token
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Tokens = append(x.Tokens, &v)
	return offset, nil
}

func (x *ValidateRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ValidateRequest[number], err)
}

func (x *ValidateRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.AccessToken = append(x.AccessToken, v)
	return offset, err
}

func (x *ValidateResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ValidateResponse[number], err)
}

func (x *ValidateResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Id = append(x.Id, v)
	return offset, err
}

func (x *RefreshRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RefreshRequest[number], err)
}

func (x *RefreshRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.RefreshToken = append(x.RefreshToken, v)
	return offset, err
}

func (x *RefreshResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RefreshResponse[number], err)
}

func (x *RefreshResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.AccessToken = append(x.AccessToken, v)
	return offset, err
}

func (x *RevokeRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RevokeRequest[number], err)
}

func (x *RevokeRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.AccessToken = append(x.AccessToken, v)
	return offset, err
}

func (x *RevokeResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RevokeResponse[number], err)
}

func (x *RevokeResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v bool
			v, offset, err = fastpb.ReadBool(buf, _type)
			if err != nil {
				return offset, err
			}
			x.Success = append(x.Success, v)
			return offset, err
		})
	return offset, err
}

func (x *TokenRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *TokenRequest) fastWriteField1(buf []byte) (offset int) {
	if len(x.Id) == 0 {
		return offset
	}
	for i := range x.GetId() {
		offset += fastpb.WriteString(buf[offset:], 1, x.GetId()[i])
	}
	return offset
}

func (x *Token) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *Token) fastWriteField1(buf []byte) (offset int) {
	if x.AccessToken == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAccessToken())
	return offset
}

func (x *Token) fastWriteField2(buf []byte) (offset int) {
	if x.RefreshToken == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetRefreshToken())
	return offset
}

func (x *TokenResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *TokenResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Tokens == nil {
		return offset
	}
	for i := range x.GetTokens() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetTokens()[i])
	}
	return offset
}

func (x *ValidateRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ValidateRequest) fastWriteField1(buf []byte) (offset int) {
	if len(x.AccessToken) == 0 {
		return offset
	}
	for i := range x.GetAccessToken() {
		offset += fastpb.WriteString(buf[offset:], 1, x.GetAccessToken()[i])
	}
	return offset
}

func (x *ValidateResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ValidateResponse) fastWriteField1(buf []byte) (offset int) {
	if len(x.Id) == 0 {
		return offset
	}
	for i := range x.GetId() {
		offset += fastpb.WriteString(buf[offset:], 1, x.GetId()[i])
	}
	return offset
}

func (x *RefreshRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *RefreshRequest) fastWriteField1(buf []byte) (offset int) {
	if len(x.RefreshToken) == 0 {
		return offset
	}
	for i := range x.GetRefreshToken() {
		offset += fastpb.WriteString(buf[offset:], 1, x.GetRefreshToken()[i])
	}
	return offset
}

func (x *RefreshResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *RefreshResponse) fastWriteField1(buf []byte) (offset int) {
	if len(x.AccessToken) == 0 {
		return offset
	}
	for i := range x.GetAccessToken() {
		offset += fastpb.WriteString(buf[offset:], 1, x.GetAccessToken()[i])
	}
	return offset
}

func (x *RevokeRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *RevokeRequest) fastWriteField1(buf []byte) (offset int) {
	if len(x.AccessToken) == 0 {
		return offset
	}
	for i := range x.GetAccessToken() {
		offset += fastpb.WriteString(buf[offset:], 1, x.GetAccessToken()[i])
	}
	return offset
}

func (x *RevokeResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *RevokeResponse) fastWriteField1(buf []byte) (offset int) {
	if len(x.Success) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 1, len(x.GetSuccess()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteBool(buf[offset:], numTagOrKey, x.GetSuccess()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *TokenRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *TokenRequest) sizeField1() (n int) {
	if len(x.Id) == 0 {
		return n
	}
	for i := range x.GetId() {
		n += fastpb.SizeString(1, x.GetId()[i])
	}
	return n
}

func (x *Token) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *Token) sizeField1() (n int) {
	if x.AccessToken == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAccessToken())
	return n
}

func (x *Token) sizeField2() (n int) {
	if x.RefreshToken == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetRefreshToken())
	return n
}

func (x *TokenResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *TokenResponse) sizeField1() (n int) {
	if x.Tokens == nil {
		return n
	}
	for i := range x.GetTokens() {
		n += fastpb.SizeMessage(1, x.GetTokens()[i])
	}
	return n
}

func (x *ValidateRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ValidateRequest) sizeField1() (n int) {
	if len(x.AccessToken) == 0 {
		return n
	}
	for i := range x.GetAccessToken() {
		n += fastpb.SizeString(1, x.GetAccessToken()[i])
	}
	return n
}

func (x *ValidateResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ValidateResponse) sizeField1() (n int) {
	if len(x.Id) == 0 {
		return n
	}
	for i := range x.GetId() {
		n += fastpb.SizeString(1, x.GetId()[i])
	}
	return n
}

func (x *RefreshRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *RefreshRequest) sizeField1() (n int) {
	if len(x.RefreshToken) == 0 {
		return n
	}
	for i := range x.GetRefreshToken() {
		n += fastpb.SizeString(1, x.GetRefreshToken()[i])
	}
	return n
}

func (x *RefreshResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *RefreshResponse) sizeField1() (n int) {
	if len(x.AccessToken) == 0 {
		return n
	}
	for i := range x.GetAccessToken() {
		n += fastpb.SizeString(1, x.GetAccessToken()[i])
	}
	return n
}

func (x *RevokeRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *RevokeRequest) sizeField1() (n int) {
	if len(x.AccessToken) == 0 {
		return n
	}
	for i := range x.GetAccessToken() {
		n += fastpb.SizeString(1, x.GetAccessToken()[i])
	}
	return n
}

func (x *RevokeResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *RevokeResponse) sizeField1() (n int) {
	if len(x.Success) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(1, len(x.GetSuccess()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeBool(numTagOrKey, x.GetSuccess()[numIdxOrVal])
			return n
		})
	return n
}

var fieldIDToName_TokenRequest = map[int32]string{
	1: "Id",
}

var fieldIDToName_Token = map[int32]string{
	1: "AccessToken",
	2: "RefreshToken",
}

var fieldIDToName_TokenResponse = map[int32]string{
	1: "Tokens",
}

var fieldIDToName_ValidateRequest = map[int32]string{
	1: "AccessToken",
}

var fieldIDToName_ValidateResponse = map[int32]string{
	1: "Id",
}

var fieldIDToName_RefreshRequest = map[int32]string{
	1: "RefreshToken",
}

var fieldIDToName_RefreshResponse = map[int32]string{
	1: "AccessToken",
}

var fieldIDToName_RevokeRequest = map[int32]string{
	1: "AccessToken",
}

var fieldIDToName_RevokeResponse = map[int32]string{
	1: "Success",
}
