// Code generated by Kitex v0.9.1. DO NOT EDIT.

package fileservice

import (
	"context"
	"errors"
	file "file/kitex_gen/file"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Upload": kitex.NewMethodInfo(
		uploadHandler,
		newUploadArgs,
		newUploadResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"Download": kitex.NewMethodInfo(
		downloadHandler,
		newDownloadArgs,
		newDownloadResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"Check": kitex.NewMethodInfo(
		checkHandler,
		newCheckArgs,
		newCheckResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"Delete": kitex.NewMethodInfo(
		deleteHandler,
		newDeleteArgs,
		newDeleteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"Detail": kitex.NewMethodInfo(
		detailHandler,
		newDetailArgs,
		newDetailResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"Update": kitex.NewMethodInfo(
		updateHandler,
		newUpdateArgs,
		newUpdateResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	fileServiceServiceInfo                = NewServiceInfo()
	fileServiceServiceInfoForClient       = NewServiceInfoForClient()
	fileServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return fileServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return fileServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return fileServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "FileService"
	handlerType := (*file.FileService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "file",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func uploadHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(file.UploadRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(file.FileService).Upload(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UploadArgs:
		success, err := handler.(file.FileService).Upload(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UploadResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUploadArgs() interface{} {
	return &UploadArgs{}
}

func newUploadResult() interface{} {
	return &UploadResult{}
}

type UploadArgs struct {
	Req *file.UploadRequest
}

func (p *UploadArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(file.UploadRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UploadArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UploadArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UploadArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UploadArgs) Unmarshal(in []byte) error {
	msg := new(file.UploadRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UploadArgs_Req_DEFAULT *file.UploadRequest

func (p *UploadArgs) GetReq() *file.UploadRequest {
	if !p.IsSetReq() {
		return UploadArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UploadArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UploadArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UploadResult struct {
	Success *file.UploadResponse
}

var UploadResult_Success_DEFAULT *file.UploadResponse

func (p *UploadResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(file.UploadResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UploadResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UploadResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UploadResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UploadResult) Unmarshal(in []byte) error {
	msg := new(file.UploadResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UploadResult) GetSuccess() *file.UploadResponse {
	if !p.IsSetSuccess() {
		return UploadResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UploadResult) SetSuccess(x interface{}) {
	p.Success = x.(*file.UploadResponse)
}

func (p *UploadResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UploadResult) GetResult() interface{} {
	return p.Success
}

func downloadHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(file.DownloadRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(file.FileService).Download(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DownloadArgs:
		success, err := handler.(file.FileService).Download(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DownloadResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDownloadArgs() interface{} {
	return &DownloadArgs{}
}

func newDownloadResult() interface{} {
	return &DownloadResult{}
}

type DownloadArgs struct {
	Req *file.DownloadRequest
}

func (p *DownloadArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(file.DownloadRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DownloadArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DownloadArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DownloadArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DownloadArgs) Unmarshal(in []byte) error {
	msg := new(file.DownloadRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DownloadArgs_Req_DEFAULT *file.DownloadRequest

func (p *DownloadArgs) GetReq() *file.DownloadRequest {
	if !p.IsSetReq() {
		return DownloadArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DownloadArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DownloadArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DownloadResult struct {
	Success *file.DownloadResponse
}

var DownloadResult_Success_DEFAULT *file.DownloadResponse

func (p *DownloadResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(file.DownloadResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DownloadResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DownloadResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DownloadResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DownloadResult) Unmarshal(in []byte) error {
	msg := new(file.DownloadResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DownloadResult) GetSuccess() *file.DownloadResponse {
	if !p.IsSetSuccess() {
		return DownloadResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DownloadResult) SetSuccess(x interface{}) {
	p.Success = x.(*file.DownloadResponse)
}

func (p *DownloadResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DownloadResult) GetResult() interface{} {
	return p.Success
}

func checkHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(file.CheckRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(file.FileService).Check(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CheckArgs:
		success, err := handler.(file.FileService).Check(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CheckResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCheckArgs() interface{} {
	return &CheckArgs{}
}

func newCheckResult() interface{} {
	return &CheckResult{}
}

type CheckArgs struct {
	Req *file.CheckRequest
}

func (p *CheckArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(file.CheckRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CheckArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CheckArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CheckArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CheckArgs) Unmarshal(in []byte) error {
	msg := new(file.CheckRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CheckArgs_Req_DEFAULT *file.CheckRequest

func (p *CheckArgs) GetReq() *file.CheckRequest {
	if !p.IsSetReq() {
		return CheckArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CheckArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CheckArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CheckResult struct {
	Success *file.CheckResponse
}

var CheckResult_Success_DEFAULT *file.CheckResponse

func (p *CheckResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(file.CheckResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CheckResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CheckResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CheckResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CheckResult) Unmarshal(in []byte) error {
	msg := new(file.CheckResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CheckResult) GetSuccess() *file.CheckResponse {
	if !p.IsSetSuccess() {
		return CheckResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CheckResult) SetSuccess(x interface{}) {
	p.Success = x.(*file.CheckResponse)
}

func (p *CheckResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CheckResult) GetResult() interface{} {
	return p.Success
}

func deleteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(file.DeleteRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(file.FileService).Delete(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteArgs:
		success, err := handler.(file.FileService).Delete(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteArgs() interface{} {
	return &DeleteArgs{}
}

func newDeleteResult() interface{} {
	return &DeleteResult{}
}

type DeleteArgs struct {
	Req *file.DeleteRequest
}

func (p *DeleteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(file.DeleteRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteArgs) Unmarshal(in []byte) error {
	msg := new(file.DeleteRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteArgs_Req_DEFAULT *file.DeleteRequest

func (p *DeleteArgs) GetReq() *file.DeleteRequest {
	if !p.IsSetReq() {
		return DeleteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteResult struct {
	Success *file.DeleteResponse
}

var DeleteResult_Success_DEFAULT *file.DeleteResponse

func (p *DeleteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(file.DeleteResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteResult) Unmarshal(in []byte) error {
	msg := new(file.DeleteResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteResult) GetSuccess() *file.DeleteResponse {
	if !p.IsSetSuccess() {
		return DeleteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteResult) SetSuccess(x interface{}) {
	p.Success = x.(*file.DeleteResponse)
}

func (p *DeleteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteResult) GetResult() interface{} {
	return p.Success
}

func detailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(file.DetailRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(file.FileService).Detail(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DetailArgs:
		success, err := handler.(file.FileService).Detail(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DetailResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDetailArgs() interface{} {
	return &DetailArgs{}
}

func newDetailResult() interface{} {
	return &DetailResult{}
}

type DetailArgs struct {
	Req *file.DetailRequest
}

func (p *DetailArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(file.DetailRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DetailArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DetailArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DetailArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DetailArgs) Unmarshal(in []byte) error {
	msg := new(file.DetailRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DetailArgs_Req_DEFAULT *file.DetailRequest

func (p *DetailArgs) GetReq() *file.DetailRequest {
	if !p.IsSetReq() {
		return DetailArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DetailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DetailArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DetailResult struct {
	Success *file.DetailResponse
}

var DetailResult_Success_DEFAULT *file.DetailResponse

func (p *DetailResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(file.DetailResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DetailResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DetailResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DetailResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DetailResult) Unmarshal(in []byte) error {
	msg := new(file.DetailResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DetailResult) GetSuccess() *file.DetailResponse {
	if !p.IsSetSuccess() {
		return DetailResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DetailResult) SetSuccess(x interface{}) {
	p.Success = x.(*file.DetailResponse)
}

func (p *DetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DetailResult) GetResult() interface{} {
	return p.Success
}

func updateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(file.UpdateRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(file.FileService).Update(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateArgs:
		success, err := handler.(file.FileService).Update(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateArgs() interface{} {
	return &UpdateArgs{}
}

func newUpdateResult() interface{} {
	return &UpdateResult{}
}

type UpdateArgs struct {
	Req *file.UpdateRequest
}

func (p *UpdateArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(file.UpdateRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateArgs) Unmarshal(in []byte) error {
	msg := new(file.UpdateRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateArgs_Req_DEFAULT *file.UpdateRequest

func (p *UpdateArgs) GetReq() *file.UpdateRequest {
	if !p.IsSetReq() {
		return UpdateArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateResult struct {
	Success *file.UpdateResponse
}

var UpdateResult_Success_DEFAULT *file.UpdateResponse

func (p *UpdateResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(file.UpdateResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateResult) Unmarshal(in []byte) error {
	msg := new(file.UpdateResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateResult) GetSuccess() *file.UpdateResponse {
	if !p.IsSetSuccess() {
		return UpdateResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateResult) SetSuccess(x interface{}) {
	p.Success = x.(*file.UpdateResponse)
}

func (p *UpdateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Upload(ctx context.Context, Req *file.UploadRequest) (r *file.UploadResponse, err error) {
	var _args UploadArgs
	_args.Req = Req
	var _result UploadResult
	if err = p.c.Call(ctx, "Upload", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Download(ctx context.Context, Req *file.DownloadRequest) (r *file.DownloadResponse, err error) {
	var _args DownloadArgs
	_args.Req = Req
	var _result DownloadResult
	if err = p.c.Call(ctx, "Download", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Check(ctx context.Context, Req *file.CheckRequest) (r *file.CheckResponse, err error) {
	var _args CheckArgs
	_args.Req = Req
	var _result CheckResult
	if err = p.c.Call(ctx, "Check", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Delete(ctx context.Context, Req *file.DeleteRequest) (r *file.DeleteResponse, err error) {
	var _args DeleteArgs
	_args.Req = Req
	var _result DeleteResult
	if err = p.c.Call(ctx, "Delete", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Detail(ctx context.Context, Req *file.DetailRequest) (r *file.DetailResponse, err error) {
	var _args DetailArgs
	_args.Req = Req
	var _result DetailResult
	if err = p.c.Call(ctx, "Detail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Update(ctx context.Context, Req *file.UpdateRequest) (r *file.UpdateResponse, err error) {
	var _args UpdateArgs
	_args.Req = Req
	var _result UpdateResult
	if err = p.c.Call(ctx, "Update", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
